/* eslint-disable consistent-return */
/* eslint-disable camelcase */
const {{properCase name }} = require('./{{ name }}.model');

const APIError = require('../../helpers/APIError');
const httpStatus = require('http-status');
const STATUS = require('../../variables/CONST_STATUS').STATUS;

/**
 * Load {{ name }} and append to req
 */
async function load(req, res, next, id) {
  // eslint-disable-next-line no-param-reassign
  req.{{ name }} = await {{ properCase name }}.findById(id);
  if (!req.{{ name }}) {
    next(
        new APIError('Item not found', httpStatus.NOT_FOUND, true));
  }
  next();
}
/**
 * list {{ name }}
 */
async function list(req, res, next) {
  try {
    const { limit = 500, skip = 0, sort, filter } = req.query;
    const {{ name }}s = await {{ properCase name }}.listBy({ limit, skip, sort, filter });
    res.json({{ name }}s);
  } catch (e) {
    next(e);
  }
}
/**
 * create {{ name }}
 */
// eslint-disable-next-line consistent-return
async function create(req, res, next) {
  try {
        // eslint-disable-next-line max-len
    const {
      name,
      code
    } = req.body;
    const existCode = await {{ properCase  name }}.findOne({ code });
    if (existCode) {
      const err = new APIError('Exist {{ name }} with code');
      return next(err);
    }
    const {{ name }} = new {{properCase  name }}({
        // eslint-disable-next-line max-len
        name,
        code,
      });

    return {{ name }}.save()
                    .then((saved{{ name }}) => {
                      if (saved{{ name }}) res.json(saved{{ name }});
                      else res.transforemer.errorBadRequest('Can not create item');
                    })
      .catch((e) => {
        next(e);
      });
  } catch (e) {
    next(e);
  }
}
/**
 * update {{ name }}
 */
// eslint-disable-next-line consistent-return
async function update(req, res, next) {
  try {
    const {
      name,
      code,
    } = req.body;
    const existCode = await {{ properCase name }}.findOne({ code });
    if (existCode && code !== req.{{ name }}.code) {
      const err = new APIError('Exist {{ name }} with code');
      return next(err);
    }
    const {{ name }} = req.{{ name }};
    {{ name }}.name = name;
    {{ name }}.code = code;


    return {{ name }}.save().then(async (result) => {
      res.json(result);
    }).catch((err) => {
      next(err);
    });
  } catch (e) {
    next(e);
  }
}

/**
 * Delete costEstimate.
 * @returns {{{ name }}}
 */
function del(req, res, next) {
  const {{ name }} = req.{{ name }};
  {{ name }}.status = STATUS.DELETED;
  {{ name }}.code = '';

  {{ name }}
  .save()
  .then(result=>{
    res.json({
      success:true,
      data:result,
    })
  }
  )
  .catch(e => next(e));
}

async function deletedList(req, res, next) {
  try {
    const { ids } = req.body;
    const arrDataDelete = ids.map(async ({{ name }}Id) => {
      const {{ name }} = await {{ properCase name }}.findById({{ name }}Id);
      if ({{ name }}) {
        {{ name }}.status = STATUS.DELETED;
        {{ name }}.code = '';
        return {{ name }}.save();
      }
    });
    const deletedData = await Promise.all(arrDataDelete);
    res.json({
      success: true,
      data: deletedData,
    });
  } catch (e) {
    //   console.log(e)
    next(e);
  }
}
function get(req, res) {
  res.json(req.{{ name }});
}

module.exports = {
  list,
  load,
  create,
  update,
  del,
  get,
  deletedList
};
